공동인증서와 공인인증서 차이
기득권 !
공동 - 은행에서 발행
공인 - 국가에서 인증하여 발행

공동인증서 절차
은행에서 신분증 및 본인인증 -> CA등록 -> ID/PWD 발급
private 생성 <-> public 생성( CA에 Pub키, parameter, 등 등록)
은행에서 Pub로 data를 암호화 -> 사용자가 Private으로 복호화

전자서명
- 전자서명은 원본의 해시 값을 구한뒤 부인 방지 기능을 부여하기 위해 공개 키 방법을 사용
	(=생성자가 원본해시 값 구하고 암호화 함)
- 위조불가, 인증, 재사용 불가
- 전자 문서 = Document(해시를 값을 구함), 서명 개인키(암호화)-> 암호 Data

검증 ( Doc -> hash256 => 해시값을 구하고, 암호 Data로 검증, CA등록
		-> CA에서 받은 데이터의 해시값은 원본 해시값이랑 일치 해야한다.)

HTTPS(비밀 통신)->PKI, TLS
	-if pc에 크롬 설치 시 크롬 안에 CA list 포함
		=> 설치파일에 hash키를 같이 제공(이 작업으로 인해 원본 조작 방지)

■ 체인코드개요
-비즈니스 객체의 상태 정의
-서로 다른 상태를 프로세스화

아키텍처와 스마트 계약 개발자
블록 체인 네트워크에서 협업
여러 조직에서 공유
■ 체인코드 구현 언어
Go, Java, JavaScript(nodejs)

■하이퍼레저 스마트 컨트랙트 구조

개발순서
체인코드 개발 - 네트워크 실행 - 체인코드 배포 - 체인코드테스트 - ( 업그레이드 가능)



핵심(8일차때 복습)

보안 
- 암호 	=> 대칭키 ( 암호통신<AES>), 
	=> 비대칭키 ( 암호통신<pub 암호, pri 복호화)
		- 서명 -> 문서 (hash 암호화, 복호화) RSA, ECD
- 해쉬	= DATA 무결설성 -> 알고리즘 이용
	=	PKI 인증기술 -> 개인 증명, CA 등록 후 list로 인증서 발급하고 사용자가 인증서 검증 
			--- HTTPS,TLS---

합의
- 분산네트워크 => 데이터 처리를 위해 여러 노드들이 검증하기 위해 알고리즘을 이용해 합의 하는 작업
		Pub B/C 관련 알고리즘 -> BFT, PoW, PoS
- 체굴, 수수료, 멀티체인

네트워크
- Server-client => tx제출
- P2P => 합의

스마트 컨트렉트(체인코드)
- 분산네트워크에서 data를 저장하기 위한 인터페이스 역할
- 비지니스 - 프로세스 (=> 계약 요구사항을 진행하여 작업을 Block상태로 데이터가 남음(신뢰성, 투명성, IT자동화)
- B/C => SDK사용으로 구현=> 네트워크 배포

체인코드
- Go, Java, Javascript(node.js)
- 나는 Go언어를 사용해 볼것이다.